services:
  weather.data_ingestion:
    container_name: weather.data_ingestion
    image: nhathuy16092003/weatherdataingestion:latest
    env_file:
      - ./weather_data_ingestion/.env
    depends_on:
      weather.databaseapi:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./weather_data_ingestion:/app
    restart: always

  weather.databaseapi:
    container_name: weather.databaseapi
    image: nhathuy16092003/weatherdatabaseapi:latest
    ports:
      - "8000:8000"
    env_file:
      - ./weather_databaseapi/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest    
    networks:
      - app-network

  debezium:
    image: debezium/connect:2.5
    networks:
      - app-network
  
  # debezium-connector-config:
  #   image: curlimages/curl
  #   networks:
  #     - app-network

  weather.dataanalysis.worker:
    image: nhathuy16092003/dataanalysis:latest
    networks:
      - app-network

  weather.dataanalysis.beat:
    image: nhathuy16092003/dataanalysis:latest
    networks:
      - app-network

  weather.prediction:
    image: nhathuy16092003/prediction:latest
    volumes:
      - prediction_models:/app/trained_models
    networks:
      - app-network

  weather.prediction.worker:
    image: nhathuy16092003/prediction:latest
    networks:
      - app-network

  weather.prediction.beat:
    image: nhathuy16092003/prediction:latest
    networks:
      - app-network

  weather.clustering:
    image: nhathuy16092003/clustering:latest
    networks:
      - app-network  

  weather.clustering.worker:
    image: nhathuy16092003/clustering:latest
    networks:
      - app-network

  weather.clustering.beat:
    image: nhathuy16092003/clustering:latest
    networks:
      - app-network

volumes:
  logs:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  prediction_models:

networks:
  app-network:
    driver: bridge